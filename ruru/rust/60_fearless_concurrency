 //Concurrent programming, where different parts of a program execute independently, and parallel programming,
 // where different parts of a program execute at the same time.


 // Within a program, you can also have independent parts that run simultaneously.

 // The features that run these independent parts are called threads.

 // Splitting the computation in your program into multiple threads to run multiple tasks at the same time can improve performance, 
 // but it also adds complexity.

 //  but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that
 //  in programs running in a single thread.

 use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| { //spawned thread
        for i in 1..10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1..5 { //main thread 
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

// when the main thread of a Rust program completes, 
// all spawned threads are shut down, whether or not they have finished running. 
