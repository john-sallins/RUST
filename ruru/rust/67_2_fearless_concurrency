// Atomic Reference Counting with Arc<T>
// See the standard library documentation for std::sync::atomic for more details.

// Fortunately, Arc<T> is a type like Rc<T> that is safe to use in concurrent situations.

//  atomics work like primitive types but are safe to share across threads.

// thread safety comes with a performance penalty that you only want to pay when you really need to.

// YOU JUST NEED TO KNOW THAT ATOMICS WORK LIKE PRIMITIVE TYPES BUT ARE SAFE TO SHARE ACROSS THREADS.

use std::sync::{Arc, Mutex};
use std::thread;

fn main() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0..10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter.lock().unwrap();

            *num += 1;
        });
        handles.push(handle);
    }

    for handle in handles {
        handle.join().unwrap();
    }

    println!("Result: {}", *counter.lock().unwrap());
}